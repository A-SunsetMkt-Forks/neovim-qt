// Autogenerated NeoVim-Qt signal/slot declarations

#ifndef NEOVIM_QT_NEOVIMOBJ
#define NEOVIM_QT_NEOVIMOBJ
#include "function.h"
#include <msgpack.h>

namespace NeoVimQt {

class NeoVimConnector;
class NeoVim: public QObject
{
	Q_OBJECT
public:
	NeoVim(NeoVimConnector *);
protected slots:
	void handleResponse(uint32_t id, Function::FunctionId fun, bool error, const msgpack_object&);
private:
	NeoVimConnector *m_c;
public slots:
	void buffer_get_length(int64_t buffer);
	void buffer_get_line(int64_t buffer, int64_t index);
	void buffer_set_line(int64_t buffer, int64_t index, QString line);
	void buffer_del_line(int64_t buffer, int64_t index);
	void buffer_get_slice(int64_t buffer, int64_t start, int64_t end, bool include_start, bool include_end);
	void buffer_set_slice(int64_t buffer, int64_t start, int64_t end, bool include_start, bool include_end, QStringList replacement);
	void buffer_get_var(int64_t buffer, QString name);
	void buffer_set_var(int64_t buffer, QString name, QVariant value);
	void buffer_get_option(int64_t buffer, QString name);
	void buffer_set_option(int64_t buffer, QString name, QVariant value);
	void buffer_get_name(int64_t buffer);
	void buffer_set_name(int64_t buffer, QString name);
	void buffer_is_valid(int64_t buffer);
	void buffer_insert(int64_t buffer, int64_t lnum, QStringList lines);
	void buffer_get_mark(int64_t buffer, QString name);
	void tabpage_get_window_count(int64_t tabpage);
	void tabpage_get_var(int64_t tabpage, QString name);
	void tabpage_set_var(int64_t tabpage, QString name, QVariant value);
	void tabpage_get_window(int64_t tabpage);
	void tabpage_is_valid(int64_t tabpage);
	void vim_push_keys(QString str);
	void vim_command(QString str);
	void vim_eval(QString str);
	void vim_strwidth(QString str);
	void vim_list_runtime_paths();
	void vim_change_directory(QString dir);
	void vim_get_current_line();
	void vim_del_current_line();
	void vim_set_current_line(QString line);
	void vim_get_var(QString name);
	void vim_set_var(QString name, QVariant value);
	void vim_get_vvar(QString name);
	void vim_get_option(QString name);
	void vim_set_option(QString name, QVariant value);
	void vim_out_write(QString str);
	void vim_err_write(QString str);
	void vim_get_buffer_count();
	void vim_get_current_buffer();
	void vim_set_current_buffer(int64_t buffer);
	void vim_get_window_count();
	void vim_get_current_window();
	void vim_set_current_window(int64_t window);
	void vim_get_tabpage_count();
	void vim_get_current_tabpage();
	void vim_set_current_tabpage(int64_t tabpage);
	void window_get_buffer(int64_t window);
	void window_get_cursor(int64_t window);
	void window_set_cursor(int64_t window, QPoint pos);
	void window_get_height(int64_t window);
	void window_set_height(int64_t window, int64_t height);
	void window_get_width(int64_t window);
	void window_set_width(int64_t window, int64_t width);
	void window_get_var(int64_t window, QString name);
	void window_set_var(int64_t window, QString name, QVariant value);
	void window_get_option(int64_t window, QString name);
	void window_set_option(int64_t window, QString name, QVariant value);
	void window_get_position(int64_t window);
	void window_get_tabpage(int64_t window);
	void window_is_valid(int64_t window);
signals:
	void on_buffer_get_length(int64_t);
	void on_buffer_get_line(QString);
	void on_buffer_set_line(void);
	void on_buffer_del_line(void);
	void on_buffer_get_slice(QStringList);
	void on_buffer_set_slice(void);
	void on_buffer_get_var(QVariant);
	void on_buffer_set_var(QVariant);
	void on_buffer_get_option(QVariant);
	void on_buffer_set_option(void);
	void on_buffer_get_name(QString);
	void on_buffer_set_name(void);
	void on_buffer_is_valid(bool);
	void on_buffer_insert(void);
	void on_buffer_get_mark(QPoint);
	void on_tabpage_get_window_count(int64_t);
	void on_tabpage_get_var(QVariant);
	void on_tabpage_set_var(QVariant);
	void on_tabpage_get_window(int64_t);
	void on_tabpage_is_valid(bool);
	void on_vim_push_keys(void);
	void on_vim_command(void);
	void on_vim_eval(QVariant);
	void on_vim_strwidth(int64_t);
	void on_vim_list_runtime_paths(QStringList);
	void on_vim_change_directory(void);
	void on_vim_get_current_line(QString);
	void on_vim_del_current_line(void);
	void on_vim_set_current_line(void);
	void on_vim_get_var(QVariant);
	void on_vim_set_var(QVariant);
	void on_vim_get_vvar(QVariant);
	void on_vim_get_option(QVariant);
	void on_vim_set_option(void);
	void on_vim_out_write(void);
	void on_vim_err_write(void);
	void on_vim_get_buffer_count(int64_t);
	void on_vim_get_current_buffer(int64_t);
	void on_vim_set_current_buffer(void);
	void on_vim_get_window_count(int64_t);
	void on_vim_get_current_window(int64_t);
	void on_vim_set_current_window(void);
	void on_vim_get_tabpage_count(int64_t);
	void on_vim_get_current_tabpage(int64_t);
	void on_vim_set_current_tabpage(void);
	void on_window_get_buffer(int64_t);
	void on_window_get_cursor(QPoint);
	void on_window_set_cursor(void);
	void on_window_get_height(int64_t);
	void on_window_set_height(void);
	void on_window_get_width(int64_t);
	void on_window_set_width(void);
	void on_window_get_var(QVariant);
	void on_window_set_var(QVariant);
	void on_window_get_option(QVariant);
	void on_window_set_option(void);
	void on_window_get_position(QPoint);
	void on_window_get_tabpage(int64_t);
	void on_window_is_valid(bool);

};
}; // Namespace
#endif

