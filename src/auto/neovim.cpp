// Autogenerated NeoVim-Qt signal/slot functions

#include "neovim.h"
#include "neovimconnector.h"

namespace NeoVimQt {

NeoVim::NeoVim(NeoVimConnector *c)
:m_c(c)
{
}

void NeoVim::buffer_get_length(int64_t buffer)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_BUFFER_GET_LENGTH, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(buffer);

}

void NeoVim::buffer_get_line(int64_t buffer, int64_t index)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_BUFFER_GET_LINE, 2);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(buffer);
	m_c->send(index);

}

void NeoVim::buffer_set_line(int64_t buffer, int64_t index, QString line)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_BUFFER_SET_LINE, 3);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(buffer);
	m_c->send(index);
	m_c->send(line);

}

void NeoVim::buffer_del_line(int64_t buffer, int64_t index)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_BUFFER_DEL_LINE, 2);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(buffer);
	m_c->send(index);

}

void NeoVim::buffer_get_slice(int64_t buffer, int64_t start, int64_t end, bool include_start, bool include_end)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_BUFFER_GET_SLICE, 5);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(buffer);
	m_c->send(start);
	m_c->send(end);
	m_c->send(include_start);
	m_c->send(include_end);

}

void NeoVim::buffer_set_slice(int64_t buffer, int64_t start, int64_t end, bool include_start, bool include_end, QStringList replacement)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_BUFFER_SET_SLICE, 6);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(buffer);
	m_c->send(start);
	m_c->send(end);
	m_c->send(include_start);
	m_c->send(include_end);
	m_c->send(replacement);

}

void NeoVim::buffer_get_var(int64_t buffer, QString name)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_BUFFER_GET_VAR, 2);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(buffer);
	m_c->send(name);

}

void NeoVim::buffer_set_var(int64_t buffer, QString name, QVariant value)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_BUFFER_SET_VAR, 3);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(buffer);
	m_c->send(name);
	m_c->send(value);

}

void NeoVim::buffer_get_option(int64_t buffer, QString name)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_BUFFER_GET_OPTION, 2);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(buffer);
	m_c->send(name);

}

void NeoVim::buffer_set_option(int64_t buffer, QString name, QVariant value)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_BUFFER_SET_OPTION, 3);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(buffer);
	m_c->send(name);
	m_c->send(value);

}

void NeoVim::buffer_get_number(int64_t buffer)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_BUFFER_GET_NUMBER, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(buffer);

}

void NeoVim::buffer_get_name(int64_t buffer)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_BUFFER_GET_NAME, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(buffer);

}

void NeoVim::buffer_set_name(int64_t buffer, QString name)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_BUFFER_SET_NAME, 2);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(buffer);
	m_c->send(name);

}

void NeoVim::buffer_is_valid(int64_t buffer)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_BUFFER_IS_VALID, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(buffer);

}

void NeoVim::buffer_insert(int64_t buffer, int64_t lnum, QStringList lines)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_BUFFER_INSERT, 3);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(buffer);
	m_c->send(lnum);
	m_c->send(lines);

}

void NeoVim::buffer_get_mark(int64_t buffer, QString name)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_BUFFER_GET_MARK, 2);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(buffer);
	m_c->send(name);

}

void NeoVim::tabpage_get_windows(int64_t tabpage)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_TABPAGE_GET_WINDOWS, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(tabpage);

}

void NeoVim::tabpage_get_var(int64_t tabpage, QString name)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_TABPAGE_GET_VAR, 2);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(tabpage);
	m_c->send(name);

}

void NeoVim::tabpage_set_var(int64_t tabpage, QString name, QVariant value)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_TABPAGE_SET_VAR, 3);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(tabpage);
	m_c->send(name);
	m_c->send(value);

}

void NeoVim::tabpage_get_window(int64_t tabpage)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_TABPAGE_GET_WINDOW, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(tabpage);

}

void NeoVim::tabpage_is_valid(int64_t tabpage)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_TABPAGE_IS_VALID, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(tabpage);

}

void NeoVim::vim_push_keys(QString str)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_PUSH_KEYS, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(str);

}

void NeoVim::vim_command(QString str)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_COMMAND, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(str);

}

void NeoVim::vim_eval(QString str)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_EVAL, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(str);

}

void NeoVim::vim_strwidth(QString str)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_STRWIDTH, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(str);

}

void NeoVim::vim_list_runtime_paths()
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_LIST_RUNTIME_PATHS, 0);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);

}

void NeoVim::vim_change_directory(QString dir)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_CHANGE_DIRECTORY, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(dir);

}

void NeoVim::vim_get_current_line()
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_GET_CURRENT_LINE, 0);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);

}

void NeoVim::vim_del_current_line()
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_DEL_CURRENT_LINE, 0);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);

}

void NeoVim::vim_set_current_line(QString line)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_SET_CURRENT_LINE, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(line);

}

void NeoVim::vim_get_var(QString name)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_GET_VAR, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(name);

}

void NeoVim::vim_set_var(QString name, QVariant value)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_SET_VAR, 2);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(name);
	m_c->send(value);

}

void NeoVim::vim_get_vvar(QString name)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_GET_VVAR, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(name);

}

void NeoVim::vim_get_option(QString name)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_GET_OPTION, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(name);

}

void NeoVim::vim_set_option(QString name, QVariant value)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_SET_OPTION, 2);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(name);
	m_c->send(value);

}

void NeoVim::vim_out_write(QString str)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_OUT_WRITE, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(str);

}

void NeoVim::vim_err_write(QString str)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_ERR_WRITE, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(str);

}

void NeoVim::vim_get_buffers()
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_GET_BUFFERS, 0);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);

}

void NeoVim::vim_get_current_buffer()
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_GET_CURRENT_BUFFER, 0);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);

}

void NeoVim::vim_set_current_buffer(int64_t buffer)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_SET_CURRENT_BUFFER, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(buffer);

}

void NeoVim::vim_get_windows()
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_GET_WINDOWS, 0);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);

}

void NeoVim::vim_get_current_window()
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_GET_CURRENT_WINDOW, 0);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);

}

void NeoVim::vim_set_current_window(int64_t window)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_SET_CURRENT_WINDOW, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(window);

}

void NeoVim::vim_get_tabpages()
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_GET_TABPAGES, 0);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);

}

void NeoVim::vim_get_current_tabpage()
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_GET_CURRENT_TABPAGE, 0);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);

}

void NeoVim::vim_set_current_tabpage(int64_t tabpage)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_VIM_SET_CURRENT_TABPAGE, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(tabpage);

}

void NeoVim::window_get_buffer(int64_t window)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_WINDOW_GET_BUFFER, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(window);

}

void NeoVim::window_get_cursor(int64_t window)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_WINDOW_GET_CURSOR, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(window);

}

void NeoVim::window_set_cursor(int64_t window, QPoint pos)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_WINDOW_SET_CURSOR, 2);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(window);
	m_c->send(pos);

}

void NeoVim::window_get_height(int64_t window)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_WINDOW_GET_HEIGHT, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(window);

}

void NeoVim::window_set_height(int64_t window, int64_t height)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_WINDOW_SET_HEIGHT, 2);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(window);
	m_c->send(height);

}

void NeoVim::window_get_width(int64_t window)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_WINDOW_GET_WIDTH, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(window);

}

void NeoVim::window_set_width(int64_t window, int64_t width)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_WINDOW_SET_WIDTH, 2);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(window);
	m_c->send(width);

}

void NeoVim::window_get_var(int64_t window, QString name)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_WINDOW_GET_VAR, 2);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(window);
	m_c->send(name);

}

void NeoVim::window_set_var(int64_t window, QString name, QVariant value)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_WINDOW_SET_VAR, 3);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(window);
	m_c->send(name);
	m_c->send(value);

}

void NeoVim::window_get_option(int64_t window, QString name)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_WINDOW_GET_OPTION, 2);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(window);
	m_c->send(name);

}

void NeoVim::window_set_option(int64_t window, QString name, QVariant value)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_WINDOW_SET_OPTION, 3);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(window);
	m_c->send(name);
	m_c->send(value);

}

void NeoVim::window_get_position(int64_t window)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_WINDOW_GET_POSITION, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(window);

}

void NeoVim::window_get_tabpage(int64_t window)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_WINDOW_GET_TABPAGE, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(window);

}

void NeoVim::window_is_valid(int64_t window)
{
	NeoVimRequest *r = m_c->startRequest(Function::NEOVIM_FN_WINDOW_IS_VALID, 1);
	connect(r, &NeoVimRequest::finished, this, &NeoVim::handleResponse);
	m_c->send(window);

}

void NeoVim::handleResponse(uint32_t msgid, Function::FunctionId fun, bool failed, const msgpack_object& res)
{
	bool convfail=true;
	if ( failed ) {
		emit error(m_c->to_QString(res));
		return;
	}

	switch(fun) {
	case Function::NEOVIM_FN_BUFFER_GET_LENGTH:
		{
			int64_t data = m_c->to_int64_t(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal buffer_get_length";
			} else {
				qDebug() << __func__ << data;
				emit on_buffer_get_length(data);
			}
		}
		break;
	case Function::NEOVIM_FN_BUFFER_GET_LINE:
		{
			QString data = m_c->to_QString(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal buffer_get_line";
			} else {
				qDebug() << __func__ << data;
				emit on_buffer_get_line(data);
			}
		}
		break;
	case Function::NEOVIM_FN_BUFFER_SET_LINE:
		{
			qDebug() << "on_buffer_set_line";
			emit on_buffer_set_line();
		}
		break;
	case Function::NEOVIM_FN_BUFFER_DEL_LINE:
		{
			qDebug() << "on_buffer_del_line";
			emit on_buffer_del_line();
		}
		break;
	case Function::NEOVIM_FN_BUFFER_GET_SLICE:
		{
			QStringList data = m_c->to_QStringList(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal buffer_get_slice";
			} else {
				qDebug() << __func__ << data;
				emit on_buffer_get_slice(data);
			}
		}
		break;
	case Function::NEOVIM_FN_BUFFER_SET_SLICE:
		{
			qDebug() << "on_buffer_set_slice";
			emit on_buffer_set_slice();
		}
		break;
	case Function::NEOVIM_FN_BUFFER_GET_VAR:
		{
			QVariant data = m_c->to_QVariant(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal buffer_get_var";
			} else {
				qDebug() << __func__ << data;
				emit on_buffer_get_var(data);
			}
		}
		break;
	case Function::NEOVIM_FN_BUFFER_SET_VAR:
		{
			QVariant data = m_c->to_QVariant(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal buffer_set_var";
			} else {
				qDebug() << __func__ << data;
				emit on_buffer_set_var(data);
			}
		}
		break;
	case Function::NEOVIM_FN_BUFFER_GET_OPTION:
		{
			QVariant data = m_c->to_QVariant(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal buffer_get_option";
			} else {
				qDebug() << __func__ << data;
				emit on_buffer_get_option(data);
			}
		}
		break;
	case Function::NEOVIM_FN_BUFFER_SET_OPTION:
		{
			qDebug() << "on_buffer_set_option";
			emit on_buffer_set_option();
		}
		break;
	case Function::NEOVIM_FN_BUFFER_GET_NUMBER:
		{
			int64_t data = m_c->to_int64_t(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal buffer_get_number";
			} else {
				qDebug() << __func__ << data;
				emit on_buffer_get_number(data);
			}
		}
		break;
	case Function::NEOVIM_FN_BUFFER_GET_NAME:
		{
			QString data = m_c->to_QString(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal buffer_get_name";
			} else {
				qDebug() << __func__ << data;
				emit on_buffer_get_name(data);
			}
		}
		break;
	case Function::NEOVIM_FN_BUFFER_SET_NAME:
		{
			qDebug() << "on_buffer_set_name";
			emit on_buffer_set_name();
		}
		break;
	case Function::NEOVIM_FN_BUFFER_IS_VALID:
		{
			bool data = m_c->to_bool(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal buffer_is_valid";
			} else {
				qDebug() << __func__ << data;
				emit on_buffer_is_valid(data);
			}
		}
		break;
	case Function::NEOVIM_FN_BUFFER_INSERT:
		{
			qDebug() << "on_buffer_insert";
			emit on_buffer_insert();
		}
		break;
	case Function::NEOVIM_FN_BUFFER_GET_MARK:
		{
			QPoint data = m_c->to_QPoint(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal buffer_get_mark";
			} else {
				qDebug() << __func__ << data;
				emit on_buffer_get_mark(data);
			}
		}
		break;
	case Function::NEOVIM_FN_TABPAGE_GET_WINDOWS:
		{
			WindowArray data = m_c->to_WindowArray(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal tabpage_get_windows";
			} else {
				qDebug() << __func__ << data;
				emit on_tabpage_get_windows(data);
			}
		}
		break;
	case Function::NEOVIM_FN_TABPAGE_GET_VAR:
		{
			QVariant data = m_c->to_QVariant(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal tabpage_get_var";
			} else {
				qDebug() << __func__ << data;
				emit on_tabpage_get_var(data);
			}
		}
		break;
	case Function::NEOVIM_FN_TABPAGE_SET_VAR:
		{
			QVariant data = m_c->to_QVariant(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal tabpage_set_var";
			} else {
				qDebug() << __func__ << data;
				emit on_tabpage_set_var(data);
			}
		}
		break;
	case Function::NEOVIM_FN_TABPAGE_GET_WINDOW:
		{
			int64_t data = m_c->to_int64_t(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal tabpage_get_window";
			} else {
				qDebug() << __func__ << data;
				emit on_tabpage_get_window(data);
			}
		}
		break;
	case Function::NEOVIM_FN_TABPAGE_IS_VALID:
		{
			bool data = m_c->to_bool(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal tabpage_is_valid";
			} else {
				qDebug() << __func__ << data;
				emit on_tabpage_is_valid(data);
			}
		}
		break;
	case Function::NEOVIM_FN_VIM_PUSH_KEYS:
		{
			qDebug() << "on_vim_push_keys";
			emit on_vim_push_keys();
		}
		break;
	case Function::NEOVIM_FN_VIM_COMMAND:
		{
			qDebug() << "on_vim_command";
			emit on_vim_command();
		}
		break;
	case Function::NEOVIM_FN_VIM_EVAL:
		{
			QVariant data = m_c->to_QVariant(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal vim_eval";
			} else {
				qDebug() << __func__ << data;
				emit on_vim_eval(data);
			}
		}
		break;
	case Function::NEOVIM_FN_VIM_STRWIDTH:
		{
			int64_t data = m_c->to_int64_t(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal vim_strwidth";
			} else {
				qDebug() << __func__ << data;
				emit on_vim_strwidth(data);
			}
		}
		break;
	case Function::NEOVIM_FN_VIM_LIST_RUNTIME_PATHS:
		{
			QStringList data = m_c->to_QStringList(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal vim_list_runtime_paths";
			} else {
				qDebug() << __func__ << data;
				emit on_vim_list_runtime_paths(data);
			}
		}
		break;
	case Function::NEOVIM_FN_VIM_CHANGE_DIRECTORY:
		{
			qDebug() << "on_vim_change_directory";
			emit on_vim_change_directory();
		}
		break;
	case Function::NEOVIM_FN_VIM_GET_CURRENT_LINE:
		{
			QString data = m_c->to_QString(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal vim_get_current_line";
			} else {
				qDebug() << __func__ << data;
				emit on_vim_get_current_line(data);
			}
		}
		break;
	case Function::NEOVIM_FN_VIM_DEL_CURRENT_LINE:
		{
			qDebug() << "on_vim_del_current_line";
			emit on_vim_del_current_line();
		}
		break;
	case Function::NEOVIM_FN_VIM_SET_CURRENT_LINE:
		{
			qDebug() << "on_vim_set_current_line";
			emit on_vim_set_current_line();
		}
		break;
	case Function::NEOVIM_FN_VIM_GET_VAR:
		{
			QVariant data = m_c->to_QVariant(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal vim_get_var";
			} else {
				qDebug() << __func__ << data;
				emit on_vim_get_var(data);
			}
		}
		break;
	case Function::NEOVIM_FN_VIM_SET_VAR:
		{
			QVariant data = m_c->to_QVariant(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal vim_set_var";
			} else {
				qDebug() << __func__ << data;
				emit on_vim_set_var(data);
			}
		}
		break;
	case Function::NEOVIM_FN_VIM_GET_VVAR:
		{
			QVariant data = m_c->to_QVariant(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal vim_get_vvar";
			} else {
				qDebug() << __func__ << data;
				emit on_vim_get_vvar(data);
			}
		}
		break;
	case Function::NEOVIM_FN_VIM_GET_OPTION:
		{
			QVariant data = m_c->to_QVariant(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal vim_get_option";
			} else {
				qDebug() << __func__ << data;
				emit on_vim_get_option(data);
			}
		}
		break;
	case Function::NEOVIM_FN_VIM_SET_OPTION:
		{
			qDebug() << "on_vim_set_option";
			emit on_vim_set_option();
		}
		break;
	case Function::NEOVIM_FN_VIM_OUT_WRITE:
		{
			qDebug() << "on_vim_out_write";
			emit on_vim_out_write();
		}
		break;
	case Function::NEOVIM_FN_VIM_ERR_WRITE:
		{
			qDebug() << "on_vim_err_write";
			emit on_vim_err_write();
		}
		break;
	case Function::NEOVIM_FN_VIM_GET_BUFFERS:
		{
			BufferArray data = m_c->to_BufferArray(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal vim_get_buffers";
			} else {
				qDebug() << __func__ << data;
				emit on_vim_get_buffers(data);
			}
		}
		break;
	case Function::NEOVIM_FN_VIM_GET_CURRENT_BUFFER:
		{
			int64_t data = m_c->to_int64_t(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal vim_get_current_buffer";
			} else {
				qDebug() << __func__ << data;
				emit on_vim_get_current_buffer(data);
			}
		}
		break;
	case Function::NEOVIM_FN_VIM_SET_CURRENT_BUFFER:
		{
			qDebug() << "on_vim_set_current_buffer";
			emit on_vim_set_current_buffer();
		}
		break;
	case Function::NEOVIM_FN_VIM_GET_WINDOWS:
		{
			WindowArray data = m_c->to_WindowArray(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal vim_get_windows";
			} else {
				qDebug() << __func__ << data;
				emit on_vim_get_windows(data);
			}
		}
		break;
	case Function::NEOVIM_FN_VIM_GET_CURRENT_WINDOW:
		{
			int64_t data = m_c->to_int64_t(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal vim_get_current_window";
			} else {
				qDebug() << __func__ << data;
				emit on_vim_get_current_window(data);
			}
		}
		break;
	case Function::NEOVIM_FN_VIM_SET_CURRENT_WINDOW:
		{
			qDebug() << "on_vim_set_current_window";
			emit on_vim_set_current_window();
		}
		break;
	case Function::NEOVIM_FN_VIM_GET_TABPAGES:
		{
			TabpageArray data = m_c->to_TabpageArray(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal vim_get_tabpages";
			} else {
				qDebug() << __func__ << data;
				emit on_vim_get_tabpages(data);
			}
		}
		break;
	case Function::NEOVIM_FN_VIM_GET_CURRENT_TABPAGE:
		{
			int64_t data = m_c->to_int64_t(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal vim_get_current_tabpage";
			} else {
				qDebug() << __func__ << data;
				emit on_vim_get_current_tabpage(data);
			}
		}
		break;
	case Function::NEOVIM_FN_VIM_SET_CURRENT_TABPAGE:
		{
			qDebug() << "on_vim_set_current_tabpage";
			emit on_vim_set_current_tabpage();
		}
		break;
	case Function::NEOVIM_FN_WINDOW_GET_BUFFER:
		{
			int64_t data = m_c->to_int64_t(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal window_get_buffer";
			} else {
				qDebug() << __func__ << data;
				emit on_window_get_buffer(data);
			}
		}
		break;
	case Function::NEOVIM_FN_WINDOW_GET_CURSOR:
		{
			QPoint data = m_c->to_QPoint(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal window_get_cursor";
			} else {
				qDebug() << __func__ << data;
				emit on_window_get_cursor(data);
			}
		}
		break;
	case Function::NEOVIM_FN_WINDOW_SET_CURSOR:
		{
			qDebug() << "on_window_set_cursor";
			emit on_window_set_cursor();
		}
		break;
	case Function::NEOVIM_FN_WINDOW_GET_HEIGHT:
		{
			int64_t data = m_c->to_int64_t(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal window_get_height";
			} else {
				qDebug() << __func__ << data;
				emit on_window_get_height(data);
			}
		}
		break;
	case Function::NEOVIM_FN_WINDOW_SET_HEIGHT:
		{
			qDebug() << "on_window_set_height";
			emit on_window_set_height();
		}
		break;
	case Function::NEOVIM_FN_WINDOW_GET_WIDTH:
		{
			int64_t data = m_c->to_int64_t(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal window_get_width";
			} else {
				qDebug() << __func__ << data;
				emit on_window_get_width(data);
			}
		}
		break;
	case Function::NEOVIM_FN_WINDOW_SET_WIDTH:
		{
			qDebug() << "on_window_set_width";
			emit on_window_set_width();
		}
		break;
	case Function::NEOVIM_FN_WINDOW_GET_VAR:
		{
			QVariant data = m_c->to_QVariant(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal window_get_var";
			} else {
				qDebug() << __func__ << data;
				emit on_window_get_var(data);
			}
		}
		break;
	case Function::NEOVIM_FN_WINDOW_SET_VAR:
		{
			QVariant data = m_c->to_QVariant(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal window_set_var";
			} else {
				qDebug() << __func__ << data;
				emit on_window_set_var(data);
			}
		}
		break;
	case Function::NEOVIM_FN_WINDOW_GET_OPTION:
		{
			QVariant data = m_c->to_QVariant(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal window_get_option";
			} else {
				qDebug() << __func__ << data;
				emit on_window_get_option(data);
			}
		}
		break;
	case Function::NEOVIM_FN_WINDOW_SET_OPTION:
		{
			qDebug() << "on_window_set_option";
			emit on_window_set_option();
		}
		break;
	case Function::NEOVIM_FN_WINDOW_GET_POSITION:
		{
			QPoint data = m_c->to_QPoint(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal window_get_position";
			} else {
				qDebug() << __func__ << data;
				emit on_window_get_position(data);
			}
		}
		break;
	case Function::NEOVIM_FN_WINDOW_GET_TABPAGE:
		{
			int64_t data = m_c->to_int64_t(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal window_get_tabpage";
			} else {
				qDebug() << __func__ << data;
				emit on_window_get_tabpage(data);
			}
		}
		break;
	case Function::NEOVIM_FN_WINDOW_IS_VALID:
		{
			bool data = m_c->to_bool(res, &convfail);
			if (convfail) {
				qWarning() << "Error unpacking data for signal window_is_valid";
			} else {
				qDebug() << __func__ << data;
				emit on_window_is_valid(data);
			}
		}
		break;
	default:
		qWarning() << "Received unexpected response";
	}

}
}; // Namespace
